{
    "if": {
        "scope": "commonlisp",
        "prefix": "if ",
        "body": "if ${1:test-form}\n    ${2:then-form}\n    ${3:else-form}",
        "description": "if allows the execution of a form to be dependent on a single test-form."
    },
    "when": {
        "scope": "commonlisp",
        "prefix": "when ",
        "body": "when ${1:test-form}\n\t${2:form*}",
        "description": "when and unless allow the execution of forms to be dependent on a single test-form."
    },
    "let": {
        "scope": "commonlisp",
        "prefix": "let ",
        "body": "let ((${1:var1} ${2:init-form-1}))\n\t${3:form*}",
        "description": "let and let* create new variable bindings and execute a series of forms that use these bindings. let performs the bindings in parallel and let* does them sequentially."
    },
    "defun": {
        "scope": "commonlisp",
        "prefix": "defun ",
        "body": "defun ${1:function-name} (${2:lambda-list})\n\t${3:form*}",
        "description": "Defines a new function named function-name in the global environment. The body of the function defined by defun consists of forms; they are executed as an implicit progn when the function is called. defun can be used to define a new function, to install a corrected version of an incorrect definition, to redefine an already-defined function, or to redefine a macro as a function."
    },
    "defmethod": {
        "scope": "commonlisp",
        "prefix": "defmethod ",
        "body": "defmethod ${1:function-name} (${2:specialized-lambda-list})\n\t${3:form*}",
        "description": "The macro defmethod defines a method on a generic function."
    },
    "make-instance": {
        "scope": "commonlisp",
        "prefix": "make-instance ",
        "body": "make-instance ${1:class} ${2:initargs}",
        "description": "The generic function make-instance creates and returns a new instance of the given class."
    },
    "lambda": {
        "scope": "commonlisp",
        "prefix": "lambda ",
        "body": "lambda (${1:lambda-list})\n\t${2:form*}",
        "description": "Provides a shorthand notation for a function special form involving a lambda expression such that:"
    },
    "let*": {
        "scope": "commonlisp",
        "prefix": "let* ",
        "body": "let* ((${1:var1} ${2:init-form-1}))\n\t${3:form*}",
        "description": "let and let* create new variable bindings and execute a series of forms that use these bindings. let performs the bindings in parallel and let* does them sequentially."
    },
    "unless": {
        "scope": "commonlisp",
        "prefix": "unless ",
        "body": "unless ${1:test-form}\n\t${2:form*}",
        "description": "when and unless allow the execution of forms to be dependent on a single test-form."
    },
    "do": {
        "scope": "commonlisp",
        "prefix": "do ",
        "body": "do ((${1:init-form} ${2:step-form}))\n    (${3:end-test-form} ${4:result-form*})",
        "description": "do iterates over a group of statements while a test condition holds. do accepts an arbitrary number of iteration vars which are bound within the iteration and stepped in parallel. An initial value may be supplied for each iteration variable by use of an init-form. Step-forms may be used to specify how the vars should be updated on succeeding iterations through the loop. Step-forms may be used both to generate successive values or to accumulate results. If the end-test-form condition is met prior to an execution of the body, the iteration terminates. Tags label statements."
    },
    "cond": {
        "scope": "commonlisp",
        "prefix": "cond ",
        "body": "cond (${1:test-form-1} ${2:form1})\n      (${3:test-form-2} ${4:form2})",
        "description": "cond allows the execution of forms to be dependent on test-form."
    },
    "search": {
        "scope": "commonlisp",
        "prefix": "search ",
        "body": "search ${1:sequence-1} ${2:sequence-2}",
        "description": "Searches sequence-2 for a subsequence that matches sequence-1."
    },
    "apply": {
        "scope": "commonlisp",
        "prefix": "apply ",
        "body": "apply ${1:function} ${2:args+}",
        "description": "Applies the function to the args."
    },
    "defmacro": {
        "scope": "commonlisp",
        "prefix": "defmacro ",
        "body": "defmacro ${1:name} (${2:lambda-list})\n\t${3:form*}",
        "description": "Defines name as a macro by associating a macro function with that name in the global environment.  The macro function is defined in the same lexical environment in which the defmacro form appears."
    },
    "flet": {
        "scope": "commonlisp",
        "prefix": "flet ",
        "body": "flet ((${1:function-name} (${2:lambda-list})\n       \t${3:local-form*}))\n\t${4:form*}",
        "description": "flet, labels, and macrolet define local functions and macros, and execute forms using the local definitions. Forms are executed in order of occurrence."
    },
    "defclass": {
        "scope": "commonlisp",
        "prefix": "defclass ",
        "body": "defclass ${1:class-name} (${2:superclass-name*})",
        "description": "The macro defclass defines a new named class. It returns the new class object as its result."
    },
    "sort": {
        "scope": "commonlisp",
        "prefix": "sort ",
        "body": "sort ${1:sequence} ${2:predicate}",
        "description": "sort and stable-sort destructively sort sequences according to the order determined by the predicate function."
    },
    "handler-case": {
        "scope": "commonlisp",
        "prefix": "handler-case ",
        "body": "handler-case (${1:expression})\n\t(${3:clause})",
        "description": "handler-case executes expression in a dynamic environment where various handlers are active. Each error-clause specifies how to handle a condition matching the indicated typespec. A no-error-clause allows the specification of a particular action if control returns normally."
    },
    "aref": {
        "scope": "commonlisp",
        "prefix": "aref ",
        "body": "aref ${1:array} ${2:subscripts}",
        "description": "Accesses the array element specified by the subscripts. If no subscripts are supplied and array is zero rank, aref accesses the sole element of array."
    },
    "multiple-value-bind": {
        "scope": "commonlisp",
        "prefix": "multiple-value-bind ",
        "body": "multiple-value-bind (${1:var*})\n\t\t(${2:values-form})\n\t${3:form*}",
        "description": "Creates new variable bindings for the vars and executes a series of forms that use these bindings."
    },
    "case": {
        "scope": "commonlisp",
        "prefix": "case ",
        "body": "case ${1:keyform}\n\t(${2:normal-clause})\n\t(${3:otherwise-clause})",
        "description": "These macros allow the conditional execution of a body of forms in a clause that is selected by matching the test-key on the basis of its identity."
    },
    "labels": {
        "scope": "commonlisp",
        "prefix": "labels ",
        "body": "labels ((${1:function-name} (${2:lambda-list})\n       \t${3:local-form*}))\n\t${4:form*}",
        "description": "flet, labels, and macrolet define local functions and macros, and execute forms using the local definitions. Forms are executed in order of occurrence."
    },
    "pushnew": {
        "scope": "commonlisp",
        "prefix": "pushnew ",
        "body": "pushnew ${1:item} ${2:place}",
        "description": "pushnew tests whether item is the same as any existing element of the list stored in place. If item is not, it is prepended to the list, and the new list is stored in place."
    },
    "unwind-protect": {
        "scope": "commonlisp",
        "prefix": "unwind-protect ",
        "body": "unwind-protect (${1:protected-form})\n\t(${2:cleanup-form*})",
        "description": "unwind-protect evaluates protected-form and guarantees that cleanup-forms are executed before unwind-protect exits, whether it terminates normally or is aborted by a control transfer of some kind. unwind-protect is intended to be used to make sure that certain side effects take place after the evaluation of protected-form."
    },
    "handler-bind": {
        "scope": "commonlisp",
        "prefix": "handler-bind ",
        "body": "handler-bind ((${1:binding*}))\n\t{2:form*}",
        "description": "Executes forms in a dynamic environment where the indicated handler bindings are in effect."
    },
    "destructuring-bind": {
        "scope": "commonlisp",
        "prefix": "destructuring-bind ",
        "body": "destructuring-bind (${1:lambda-list}) ${2:expression}\n\t${3:form*}",
        "description": "destructuring-bind binds the variables specified in lambda-list to the corresponding values in the tree structure resulting from the evaluation of expression; then destructuring-bind evaluates forms."
    },
    "with-open-file": {
        "scope": "commonlisp",
        "prefix": "with-open-file ",
        "body": "with-open-file (${1:stream} ${2:filespec} ${3:options*})\n\t${4:form*}",
        "description": "with-open-file uses open to create a file stream  to file named by filespec. Filespec is the name of the file to be opened. Options are used as keyword arguments to open."
    },
    "prog1": {
        "scope": "commonlisp",
        "prefix": "prog1 ",
        "body": "prog1 ${1:first-form}\n\t${2:form*}",
        "description": "prog1 evaluates first-form and then forms, yielding as its only value the primary value yielded by first-form."
    },
    "with-output-to-string": {
        "scope": "commonlisp",
        "prefix": "with-output-to-string ",
        "body": "with-output-to-string (${1:var})\n\t${2:form*}",
        "description": "with-output-to-string creates a  character output stream, performs a series of operations that may send results to this stream, and then closes the stream."
    },
    "etypecase": {
        "scope": "commonlisp",
        "prefix": "etypecase ",
        "body": "etypecase ${1:keyform}\n\t${2:normal-clause*}",
        "description": "These macros allow the conditional execution of a body of forms in a clause that is selected by matching the test-key on the basis of its type."
    },
    "defpackage": {
        "scope": "commonlisp",
        "prefix": "defpackage ",
        "body": "defpackage ${1:defined-package-name}\n\t${2:options}",
        "description": "defpackage creates a package as specified and returns the package."
    },
    "byte": {
        "scope": "commonlisp",
        "prefix": "byte ",
        "body": "byte ${1:size} ${2:position}",
        "description": "byte returns a byte specifier that indicates a byte of width size and whose bits have weights 2^position + size - 1 through 2^position, and whose representation is implementation-dependent."
    }
}